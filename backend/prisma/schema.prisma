datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Roles {
  USER
  RECRUITER
  ADMIN
}

model Users {
  id           Int           @id @default(autoincrement())
  fullName     String
  email        String        @unique
  password     String
  role         Roles
  company      Company?      @relation(fields: [companyId], references: [id])
  companyId    Int?
  profile      Profile?
  applications Application[]
  offers       Offers[]
  favorites    Favorites[]

  @@map("users")
}

model Company {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  address  String
  country  String
  category String
  email    String
  website  String
  imageUrl String?
  Users    Users[]

  @@map("company")
}

model Offers {
  id                 Int           @id @default(autoincrement())
  title              String
  description        String
  owner              Users         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId            Int
  salary             String
  requirements       String
  location           String
  modality           String
  status             OfferStatus   @default(OPEN)
  creationDate       DateTime      @default(now()) @map("creation_date")
  contractType       String?       @default("Contrato fijo")
  workDay            String?       @default("Tiempo completo")
  companyName        String?       @default("Talentify")
  companyDescription String?       @default("")
  applications       Application[]
  favorites          Favorites[]

  @@map("offers")
}

enum OfferStatus {
  OPEN
  CLOSED
}

model Profile {
  id          Int          @id @default(autoincrement())
  user        Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int          @unique
  about       String
  address     String
  phone       String
  resume      String
  experiences Experience[]
  studies     Studies[]

  @@map("profile")
}

model Experience {
  id           Int       @id @default(autoincrement())
  profile      Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId    Int
  company_name String
  position     String
  start_date   DateTime
  end_date     DateTime?

  @@map("experience")
}

model Studies {
  id               Int      @id @default(autoincrement())
  profile          Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId        Int
  institution_name String
  degree           String
  graduation_date  DateTime

  @@map("studies")
}

model Application {
  id        Int               @id @default(autoincrement())
  user      Users             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  offer     Offers            @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId   Int
  status    ApplicationStatus
  createdAt DateTime          @default(now()) @map("created_at")

  @@map("applications")
}

enum ApplicationStatus {
  APPLIED
  REVIEWED
  INTERVIEW
  OFFER
  REJECTED
}

model Favorites {
  id        Int      @id @default(autoincrement())
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  offer     Offers   @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId   Int
  createdAt DateTime @default(now()) @map("created_at")

  @@map("favorites")
}
